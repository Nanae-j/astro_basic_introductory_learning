---
import type { GetStaticPaths, MarkdownInstance } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogPost from "../../components/BlogPost.astro";
import { getCollection } from "astro:content";

interface Frontmatter {
  layout: string;
  title: string;
  pubDate: string;
  description: string;
  author: string;
  image: {
    url: string;
    alt: string;
  };
  tags: string[];
}

export const getStaticPaths = (async () => {
  const allPosts = await getCollection("posts");
  const uniqueTags = [
    ...new Set(allPosts.map((post) => post.data.tags).flat()),
  ];

  // uniqueTags(重複なしの記事についているタグの配列)をmapで展開
  // それぞれのタグでallPostをフィルタリング → filteredPostsに入りpostsに格納
  // paramsとpropsをreturnで返す
  return uniqueTags.map((uniqueTag) => {
    const filteredPosts = allPosts.filter((post) =>
      post.data.tags?.includes(uniqueTag),
    );

    return {
      params: { tag: uniqueTag },
      props: { posts: filteredPosts },
    };
  });
}) satisfies GetStaticPaths;

const { tag } = Astro.params;
const { posts } = Astro.props;

const sortedPosts = posts.sort((a, b) => {
  const aDate = new Date(a.data.pubDate);
  const bDate = new Date(b.data.pubDate);
  return bDate.getTime() - aDate.getTime();
});
---

<BaseLayout pageTitle={tag}>
  <p>{tag}タグがついた記事</p>
  <ul>
    {
      sortedPosts.map((post) => (
        <BlogPost url={`/posts/${post.id}`} title={post.data.title} />
      ))
    }
  </ul>
</BaseLayout>
